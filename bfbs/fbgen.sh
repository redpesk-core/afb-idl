#!/bin/bash

# fbgen uses mustach to convert a json file into a c flatbuffer converter, client or api
# based on its'executable sufix
#
# fbgen-< cvt || cli || api > <outputFileName> [inputFileName.json]

err() { echo "$*" >&2; exit 1; }

header() {
  echo "/*"
  echo "* generated by ${1} based on ${2} as schema and ${3} as tamplate"
  echo "*/"
  echo " "
}

# Check executable sufix to determine what to generate
case "$0" in
  *-cvt) ext=cvt; ixt=types;; # generate a convreter
  *-cli) ext=cli; ixt=apis;;  # generate a client
  *-api) ext=api; ixt=apis;;  # generate an api
  *) err "invalid call"       # otherwaiy return an error
esac

# Parse the output file name <ofile>-fb${ext}.<wg>
# for example "sample-fbapi.c" will give :
# $ofile = "sample"
# $wg = "c"
# NB: by default <wg> is "c"
[ -z "${1}" ] && err "no arg"
ofile="${1}"
wg="${ofile##*.}"
wg="${wg:-c}"
ofile="${ofile%.*}"
ofile="${ofile%-fb${ext}}"

# If an input file is given in second parametter use it,
# otherway checkout for a file baised on output name sufix
inspec="${2:-${ofile}-rpc-types.json}"

# Return error if not found
[ -f "${inspec}" ] || err "spec ${inspec} not found"


# search for a tamplate named fd-tamplate-<ext>.<wg> in working directory
# then in afb-ild config directory and finaly in <executable dir>/../share/afbidl
templ=
for d in "$PWD" "$HOME/.config/afb-idl" "$(dirname "$0")/../share/afb-idl"; do
	f="${d}/fb-template-${ext}.${wg}"
	[ -f "${f}" ] && { templ="${f}"; break; }
done

# return error if no tamplate is found
[ -z "${templ}" ] && err "template not found"

# generate header
echo "$(header ${0##*/} $inspec ${templ##*/})" > "${ofile}-fb${ext}.${wg}"

# Finaly generate the c code with mustach
# baised on the json input file and the template
# and put it into output file
mustach "${inspec}" "${templ}" >> "${ofile}-fb${ext}.${wg}"

